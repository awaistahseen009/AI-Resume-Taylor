import os
from typing import Dict, List, Any, TypedDict
from langgraph.graph import StateGraph, END
from services.openai_latex import OpenAILaTeXGenerator
from services.cover_letter_generator import CoverLetterGenerator
import logging
import json
import re

class ResumeAIWorkflow:
    """LangGraph-based AI workflow for resume tailoring and analysis"""
    
    def __init__(self):
        self.latex_generator = OpenAILaTeXGenerator()
        self.cover_letter_generator = CoverLetterGenerator()
        self.workflow = self._build_workflow()
    
    class WorkflowState(TypedDict, total=False):
        original_resume: str
        job_description: str
        extracted_keywords: List[str]
        job_requirements: List[str]
        tailored_resume: str
        analysis: Dict[str, Any]
        error: str
        keyword_match_score: float
        cover_letters: List[str]

    def _build_workflow(self) -> StateGraph:
        """Build the LangGraph workflow for resume processing"""
        
        # Define the state schema
        workflow = StateGraph(self.WorkflowState)
        
        # This workflow now has a single step: generating the tailored LaTeX resume.
        workflow.add_node("tailor_resume", self._tailor_resume_node)
        workflow.set_entry_point("tailor_resume")
        workflow.add_node("generate_cover_letters", self._generate_cover_letter_node)

        workflow.add_edge("tailor_resume", "generate_cover_letters")
        workflow.add_edge("generate_cover_letters", END)
        
        return workflow.compile()
    
    def _tailor_resume_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Generates a tailored LaTeX resume using the dedicated service."""
        try:
            latex_code = self.latex_generator.generate_resume_latex(
                resume_text=state['original_resume'],
                job_description=state['job_description']
            )
            state["tailored_resume"] = latex_code
        except Exception as e:
            state["error"] = f"LaTeX resume generation failed: {str(e)}"
            state["tailored_resume"] = ""
        return state

    def _generate_cover_letter_node(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """Generates up to 3 cover letters based on the resume and job description."""
        try:
            # The generator returns a CoverLetterBundle Pydantic object
            cover_letter_bundle = self.cover_letter_generator.generate(
                resume_text=state['original_resume'],
                job_description=state['job_description'],
                max_versions=3
            )
            # Convert the list of CoverLetter models into a list of dictionaries
            state["cover_letters"] = [v.model_dump() for v in cover_letter_bundle.versions]
        except Exception as e:
            logging.warning(f"Cover letter generation failed in workflow: {e}")
            state["cover_letters"] = []
        return state
    

    
    def tailor_resume(self, original_resume: str, job_description: str) -> Dict[str, Any]:
        """Main method to tailor a resume"""
        initial_state = {
            "cover_letters": [],
            "original_resume": original_resume,
            "job_description": job_description,
            "extracted_keywords": [],
            "job_requirements": [],
            "tailored_resume": "",
            "analysis": {},
            "error": ""
        }
        
        result = self.workflow.invoke(initial_state)
        
        # The primary output is the tailored LaTeX resume.
        # Other analysis fields are no longer generated by this simplified workflow.
        return {
            "tailored_resume": result.get("tailored_resume", ""),
            "cover_letters": result.get("cover_letters", []),
            "error": result.get("error", "")
        }
    

